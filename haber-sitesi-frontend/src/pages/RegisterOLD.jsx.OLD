import { useState, useContext } from 'react'
import { useNavigate, Link } from 'react-router-dom'
import api from '../services/api'
import { UserContext } from '../App'
import { validateInput, sanitizeText } from '../utils/security'
import { useToast } from '../components/Toast'
import { LoadingButton } from '../components/Loading'
import { FormErrorDisplay, ConnectionStatus } from '../components/ErrorHandling'
import { FormSubmissionOverlay } from '../components/ProgressIndicators'
import logger from '../utils/logger'

const Register = () => {
  const [username, setUsername] = useState('')
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [isGoogleLoading, setIsGoogleLoading] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [validationErrors, setValidationErrors] = useState({})
  const navigate = useNavigate()
  const { showToast } = useToast()
  const { setUser } = useContext(UserContext)
  
  // Google ile kayıt olma fonksiyonu - Backend'e basit test credential'ı gönder
  const handleGoogleRegister = async () => {
    setIsGoogleLoading(true)
    setValidationErrors({})
    
    try {
      // Backend'de zaten Google OAuth var, sadece test credential'ı gönder
      const testCredential = 'google-test-credential-' + Date.now()
      const result = await api.googleAuth(testCredential)
      
      if (result.success) {
        setUser(result.user)
        showToast('Google ile kayıt başarılı!', 'success')
        navigate('/')
      } else {
        showToast('Google ile kayıt başarısız: ' + (result.message || 'Bilinmeyen hata'), 'error')
      }
    } catch (error) {
      showToast('Google ile kayıt sırasında hata oluştu', 'error')
      logger.error('Google register error:', error)
    } finally {
      setIsGoogleLoading(false)
    }
  }
        setTimeout(async () => {
          await googleAuthManager.initialize()
          logger.log('Google Auth initialized in Register component')
        }, 100)
      } catch (error) {
        logger.warn('Google Auth initialization failed:', error)
      }
    }

    const handleGoogleAuthSuccess = (event) => {
      const { credential } = event.detail
      handleGoogleRegister(credential)
    }

    const renderGoogleButton = async () => {
      try {
        await googleAuthManager.initialize()
        setTimeout(() => {
          try {
            googleAuthManager.renderSignInButton('google-register-button', {
              type: 'standard',
              shape: 'rectangular',
              theme: 'outline',
              text: 'signup_with',
              size: 'large',
              width: '100%'
            })
          } catch (error) {
            logger.warn('Google register button render failed:', error)
          }
        }, 200)
      } catch (error) {
        logger.warn('Google Auth setup failed:', error)
      }
    }

    window.addEventListener('googleAuthSuccess', handleGoogleAuthSuccess)
    initGoogleAuth()
    renderGoogleButton()

    return () => {
      window.removeEventListener('googleAuthSuccess', handleGoogleAuthSuccess)
    }
  }, [handleGoogleRegister])

  // Manuel Google register (fallback)
  const handleManualGoogleRegister = async () => {
    try {
      await handleGoogleRegister('demo-google-register-credential-' + Date.now())
    } catch (error) {
      logger.error('Manual Google register failed:', error)
      showToast('Google ile kayıt başarısız oldu', 'error')
    }
  }
      const result = await api.googleAuth(credential)
      if (result.success) {
        // Token'i kaydet
        api.setToken(result.token)
        
        // Kullanıcı bilgisini güncelle
        const userFromToken = api.getUserFromToken()
        const finalUser = userFromToken || result.user
        setUser(finalUser)
        
        showToast('Google ile kayıt başarılı!', 'success')
        logger.log('Google Register: User set successfully')
        
        // Yönlendir
        setTimeout(() => {
          if (finalUser?.role === 'author' || finalUser?.role === 'admin') {
            navigate('/admin')
          } else {
            navigate('/')
          }
        }, 50)
      } else {
        showToast('Google ile kayıt başarısız: ' + (result.message || 'Bilinmeyen hata'), 'error')
      }
    } catch (error) {
      showToast('Google ile kayıt sırasında hata oluştu', 'error')
      logger.error('Google register error:', error)
    } finally {
      setIsGoogleLoading(false)
    }
  }
  
  const handleRegister = async e => {
    e.preventDefault()
    setValidationErrors({})
    
    // Input validation
    const errors = {}
    if (!username || !email || !password) {
      errors.general = 'Tüm alanları doldurun'
    } else {
      if (!validateInput.username(username)) {
        errors.username = 'Kullanıcı adı sadece harf, rakam, _ ve - içerebilir (3-30 karakter)'
      }
      if (!validateInput.email(email)) {
        errors.email = 'Geçerli bir e-posta adresi girin'
      }
      if (!validateInput.password(password)) {
        errors.password = 'Şifre en az 6 karakter olmalı ve en az bir harf, bir rakam içermeli'
      }
    }

    if (Object.keys(errors).length > 0) {
      setValidationErrors(errors)
      return    }

    setIsLoading(true)
    
    try {
      // Sanitize inputs
      const cleanUsername = sanitizeText(username)
      const cleanEmail = sanitizeText(email)
      
      const result = await api.register({ 
        username: cleanUsername, 
        password: password, 
        email: cleanEmail 
      })
      if (result.success) {
        showToast('Kayıt başarılı! Email adresinizi kontrol edin ve doğrulama linkine tıklayın.', 'success')
        setTimeout(() => navigate('/login'), 3000)
      } else {
        setValidationErrors({ submit: result.message || 'Kayıt başarısız' })
      }
    } catch (error) {
      setValidationErrors({ submit: 'Kayıt sırasında bir hata oluştu' })
      logger.error('Register error:', error)    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-primary-50 via-white to-accent-50 px-3 sm:px-4 lg:px-6">
      <ConnectionStatus />
      <div className="bg-white rounded-2xl sm:rounded-3xl shadow-red-xl p-6 sm:p-8 w-full max-w-md border border-primary-100 animate-slide-up relative">
        {isLoading && <FormSubmissionOverlay message="Kayıt işlemi yapılıyor..." />}
        <div className="text-center mb-6 sm:mb-8">
          <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-2">Kayıt Ol</h1>
          <p className="text-gray-600 text-sm sm:text-base">Yeni hesap oluşturun</p>        </div>
        
        <FormErrorDisplay errors={validationErrors} />
        
        <form onSubmit={handleRegister} className="space-y-4 sm:space-y-6">
          <div>
            <label className="block text-xs sm:text-sm font-semibold text-gray-700 mb-2">Kullanıcı Adı</label>
            <input
              type="text"
              placeholder="Kullanıcı adınızı girin"
              value={username}
              onChange={e => setUsername(e.target.value)}
              className="w-full px-3 py-3 sm:px-4 sm:py-3 rounded-lg sm:rounded-xl border-2 border-gray-200 focus:outline-none focus:ring-4 focus:ring-primary-100 focus:border-primary-500 transition-all duration-200 text-sm sm:text-base"
              required
            />
          </div>
          
          <div>
            <label className="block text-xs sm:text-sm font-semibold text-gray-700 mb-2">E-posta</label>
            <input
              type="email"
              placeholder="E-posta adresinizi girin"
              value={email}
              onChange={e => setEmail(e.target.value)}
              className="w-full px-3 py-3 sm:px-4 sm:py-3 rounded-lg sm:rounded-xl border-2 border-gray-200 focus:outline-none focus:ring-4 focus:ring-primary-100 focus:border-primary-500 transition-all duration-200 text-sm sm:text-base"
              required
            />
          </div>          <div>
            <label className="block text-xs sm:text-sm font-semibold text-gray-700 mb-2">Şifre</label>
            <div className="relative">
              <input
                type={showPassword ? 'text' : 'password'}
                placeholder="Şifrenizi girin"
                value={password}
                onChange={e => setPassword(e.target.value)}
                className="w-full px-3 py-3 sm:px-4 sm:py-3 pr-12 rounded-lg sm:rounded-xl border-2 border-gray-200 focus:outline-none focus:ring-4 focus:ring-primary-100 focus:border-primary-500 transition-all duration-200 text-sm sm:text-base"
                required
                aria-label="Şifre"
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 focus:outline-none focus:text-gray-700 transition-colors duration-200"
                aria-label={showPassword ? 'Şifreyi gizle' : 'Şifreyi göster'}
              >
                {showPassword ? (
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L8.464 8.464M14.12 14.12l1.415 1.415M14.12 14.12L9.878 9.878m4.242 4.242L8.464 8.464" />
                  </svg>
                ) : (
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                )}
              </button>
            </div>
          </div>
            <div className="p-3 sm:p-4 bg-gradient-to-r from-primary-50 to-accent-50 rounded-lg sm:rounded-xl border border-primary-200">
            <div className="flex items-center gap-2 sm:gap-3">
              <svg className="w-4 h-4 sm:w-5 sm:h-5 text-primary-600 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
              </svg>
              <div>
                <p className="text-xs sm:text-sm font-medium text-primary-800">Kullanıcı Hesabı</p>
                <p className="text-xs text-primary-600">Yorum yapabilir, adminler sizi yazar yapabilir</p>
              </div>
            </div>
          </div>

          <LoadingButton
            type="submit"
            loading={isLoading}
            className="w-full py-3 sm:py-4 bg-gradient-to-r from-primary-500 to-accent-500 text-white rounded-lg sm:rounded-xl hover:from-primary-600 hover:to-accent-600 transition-all duration-200 font-semibold text-base sm:text-lg shadow-red hover:shadow-red-lg disabled:opacity-50 disabled:cursor-not-allowed"
            loadingText="Kayıt olunuyor..."
          >
            Kayıt Ol          </LoadingButton>
        </form>
        
        {/* Google ile Kayıt Ol Bölümü */}
        <div className="mt-6 sm:mt-8">
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-gray-500">veya</span>
            </div>
          </div>
          
          <div className="mt-6">
            <button
              type="button"              onClick={() => handleGoogleRegister('demo-credential')}
              disabled={isGoogleLoading}
              className="w-full flex justify-center items-center px-4 py-3 sm:py-4 border border-gray-300 rounded-lg sm:rounded-xl shadow-sm bg-white text-sm sm:text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isGoogleLoading ? (
                <div className="flex items-center">
                  <div className="spinner w-5 h-5 border-gray-400 mr-2"></div>
                  Google ile kayıt olunuyor...
                </div>
              ) : (
                <div className="flex items-center">
                  <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                  </svg>
                  Google ile Kayıt Ol
                </div>
              )}
            </button>
          </div>
        </div>
        
        <div className="mt-4 sm:mt-6 text-center space-y-2">
          <a href="/forgot-password" className="text-primary-600 hover:text-primary-700 font-medium transition-colors duration-200 text-sm sm:text-base">
            Şifremi unuttum
          </a>
          <div className="text-gray-500 text-xs sm:text-sm">
            Zaten hesabınız var mı? 
            <Link to="/login" className="text-primary-600 hover:text-primary-700 font-medium ml-1 transition-colors duration-200">
              Giriş yapın
            </Link>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Register
